close all
clc
pts=curve{1};
tStart = tic; % Timer
ptsNum=size(pts,2);
maxGEN = 1000;
popSize = 200; % 遗传算法种群大小
crossoverProbabilty = 0.8; %交叉概率
mutationProbabilty = 0.2; %变异概率
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
gbest = Inf;
%随机生成城市位置
% cities = rand(2,cityNum) * 100;%100是最远距离
points=pts;
 
% 计算上述生成的城市距离
distances = calculateDistance(points);
 
% 生成种群，每个个体代表一个路径
pop = zeros(popSize, ptsNum);
for i=1:popSize
    pop(i,:) = randperm(ptsNum); 
end
offspring = zeros(popSize,ptsNum);
%保存每代的最小路劲便于画图
minPathes = zeros(maxGEN,1);
 
% GA算法
for  gen=1:maxGEN
 
    % 计算适应度的值，即路径总距离
    [fval, sumDistance, minPath, maxPath] = fitness(distances, pop);
 
    % 轮盘赌选择
    tournamentSize=4; %设置大小
    for k=1:popSize
        % 选择父代进行交叉
        tourPopDistances=zeros( tournamentSize,1);
        for i=1:tournamentSize
            randomRow = randi(popSize);
            tourPopDistances(i,1) = sumDistance(randomRow,1);
        end
 
        % 选择最好的，即距离最小的
        parent1  = min(tourPopDistances);
        [parent1X,parent1Y] = find(sumDistance==parent1,1, 'first');
        parent1Path = pop(parent1X(1,1),:);
 
 
        for i=1:tournamentSize
            randomRow = randi(popSize);
            tourPopDistances(i,1) = sumDistance(randomRow,1);
        end
        parent2  = min(tourPopDistances);
        [parent2X,parent2Y] = find(sumDistance==parent2,1, 'first');
        parent2Path = pop(parent2X(1,1),:);
 
        subPath = crossover(parent1Path, parent2Path, crossoverProbabilty);%交叉
        subPath = mutate(subPath, mutationProbabilty);%变异
 
        offspring(k,:) = subPath(1,:);
        
        minPathes(gen,1) = minPath; 
    end
    fprintf('Iterations:%d   The length of shortest path:%.2fKM \n', gen,minPath);
    % 更新
    pop = offspring;
    % 画出当前状态下的最短路径
    if minPath < gbest
        gbest = minPath;
        [bestPath]=paint(points, pop, gbest, sumDistance,gen);
    end
end
figure 
plot(minPathes,'g:','LineWidth',2);
title('Tje best path in each generation');
% set(gca,'ytick',500:100:5000); 
ylabel('The length of path');
xlabel('Iterations');
grid on
tEnd = toc(tStart);
fprintf('Time:%d Min  %f Sec.\n', floor(tEnd/60), rem(tEnd,60));

%%
figure
plot3(pts(1,bestPath),pts(2,bestPath),pts(3,bestPath),'o-');
axis equal
for i = 1:size(pts,2)
    text(pts(1,i),pts(2,i),pts(3,i),['   ' num2str(i)]);
end
for ii=1:63
    newCurve{ii}=curve{ii}(:,bestPath);
end

















